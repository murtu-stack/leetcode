
class Solution {
public:
	double findMedianSortedArrays(vector<int>& a, vector<int>& b) {
		int n1 = a.size();
		int n2 = b.size();

		// if (n2 < n1) return findMedianSortedArrays(b, a);
		int toAdd = (n1 + n2) % 2;

		int leftSize = (n1 + n2 + toAdd) / 2;

		int l = 0, r = n1;

		while (l <= r) {

			int mid = (l + (r-l)/2) ;

			int cut1 = mid;
			int cut2 = leftSize - cut1;

			int l1 = cut1 > 0 ? a[cut1 - 1] : INT_MIN;
			int r1 = cut1 >= n1 ?  INT_MAX:a[cut1];

			int l2 = cut2 > 0 ? b[cut2 - 1] : INT_MIN;
			int r2 = cut2 < n2 ? b[cut2] : INT_MAX;

			if (l1 <= r2 && l2 <= r1) {

				if (toAdd) {
					double median = max(l1, l2);
					return median;
				} else {
					double median = (double)((double)((max(l1, l2) + min(r1, r2)) * 1.0) / 2);
					return median;
				}
			}

			if (l1 > r2) r = mid - 1;
			else l = mid + 1;
		}

		return 0.0;
	}
};
